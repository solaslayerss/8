def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var21 = var5(arg2, arg1)
    var25 = func5(var21, arg1)
    var30 = func7(arg2, var25)
    var43 = func8(arg1, var30)
    if var25 < var30:
        var48 = class9()
    else:
        var48 = class11()
    for var49 in range(4):
        var48.func10(var43, var43)
    var50 = arg1 - arg1 + var43 ^ var21
    var51 = var25 ^ var25
    var52 = var25 & ((var25 & arg2) - -256959388)
    var53 = var51 + -2131387247 - var43
    var54 = var21 ^ ((arg1 ^ var25) + var25)
    var55 = (var54 | var30) & var25 | var52
    var56 = var30 | arg2 - var53 | -1882928040
    var57 = (-1315245334 & -1782196287 & var56) | var30
    var58 = ((var25 | var30) ^ var30) | arg1
    var59 = var52 ^ var51
    var60 = (var54 - (var51 + var43)) - var21
    var61 = ((var57 | var30) & var21) - var60
    result = var30 ^ var51 + var55
    return result
class class11(object):
    def func10(self, arg46, arg47):
        return 0
class class9(class11):
    def func10(self, arg44, arg45):
        return 0
def func8(arg31, arg32):
    var33 = -131261204 & arg31 & 734819370 - arg31
    var34 = arg31 | arg32
    var35 = -1228062271 ^ var34
    var36 = var34 | -591843730 & var35 & arg31
    var37 = var33 - var33 & var35
    var38 = -272 | var34 | var37 + 1078453920
    var39 = (-554 + var38) + var33 + var33
    var40 = var34 + -648 & var34 & var34
    var41 = arg32 + var34 | var35 - arg31
    var42 = ((-394 + 849) ^ var36) + var34
    result = var42 & var42
    return result
def func7(arg26, arg27):
    var28 = 0
    for var29 in xrange(19):
        var28 += (-10 ^ var29) | var29
    return var28
def func4(arg6, arg7):
    var8 = 1371854971 - 932527861
    var9 = -556919562 & 840832338 & arg7 & 588416582
    var10 = var9 | arg7 & arg6 + -577
    var11 = var8 + var8
    var12 = var11 - var8 + var11 - var10
    var13 = (446 ^ -761810924) | -1836743494
    var14 = (var13 ^ var13 + var13) - arg7
    var15 = (var11 + 1690493029 + arg6) + var9
    var16 = -201 & 2081232151 & var15
    if arg7 < var11:
        var17 = (var10 + var8) ^ 668 + var16
    else:
        var17 = ((arg6 & var14) + var16) + var8
    var18 = var15 & var11 ^ 2009227213 | var9
    var19 = (var10 + arg6 & -187790339) ^ arg6
    var20 = ((var8 | -39389974) - var16) | var16
    result = var13 ^ var10
    return result
def func3():
    closure = [7]
    def func2(arg3, arg4):
        closure[0] += func4(arg3, arg4)
        return closure[0]
    func = func2
    return func
var5 = func3()
def func5(arg22, arg23):
    closure = [0]
    def func6(acc, rest):
        var24 = (closure[0] - rest & rest & (-8 | -7) ^ -6) | -6
        closure[0] += var24
        if acc == 0:
            return var24
        else:
            result = func6(acc - 1, var24)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 62'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
